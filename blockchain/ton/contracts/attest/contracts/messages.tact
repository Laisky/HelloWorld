// =====================================
// Messages
// =====================================
message(0x90f9c368) RegisterBot {
    queryId: Int as uint64;
    manifestUrl: String;
    // botOwner is the address of the bot owner
    botOwner: Address;
    responseDestination: Address;
}

message(0x601bae6a) RegisterOracle {
    queryId: Int as uint64;
    manifestUrl: String;
    // stakeValue is the value that the oracle will stake,
    // the minimum stake value is 1 TON.
    stakeValue: Int;
    // oracleOwner is the address of the oracle owner
    oracleOwner: Address;
    responseDestination: Address;
}

message(0x8768fc32) SetBotManifest {
    queryId: Int as uint64;
    nonce: Int as uint64;
    manifestUrl: String;
    responseDestination: Address;
}

message(0x4f9f1612) SetOracleManifest {
    queryId: Int as uint64;
    nonce: Int as uint64;
    manifestUrl: String;
    responseDestination: Address;
}

message(0x269c6a56) WalletInfo {
    manifestUrl: String;
    owner: Address;
    master: Address;
}

// SubmitAttestTask is the message that generated by the submiter/bot,
// and will be sent to the master contract,
// master contract will forward the message to the wallet contract withing taskId/status/botAddress.
message(0x98d245a0) SubmitAttestTask {
    queryId: Int as uint64;
    // proofUrl is the url of the proof, better be stored at arweave
    proofUrl: String;
    // attestValue is the value that will be paid to the verifier,
    // the value in the message should be greater than attestValue.
    attestValue: Int;
    // if finishedNotifyUser is not null, notify user when the attest task is finished.
    finishedNotifyUser: Address?;
    // finishedNotifyTonAmound should not be null when finishedNotifyUser is not null.
    finishedNotifyTonAmound: Int? as coins;
    // finishedNotifyMessage should not be null when finishedNotifyUser is not null.
    finishedNotifyMessage: String?;
}

message NotifyUser {
    queryId: Int as uint64;
    receiver: Address;
    comment: String;
    // response_destination must be bot owner
    response_destination: Address;
}

message(0x25bded8a) PublishAttestTask {
    queryId: Int as uint64;
    // task id will be generated by the bot contract.
    // every task id is unique in the scope of the bot contract.
    taskId: Int as uint64;
    // status of the task, can be "pending", "verified" or "rejected", will be set by the master contract
    status: String = "pending";
    // botOwner is the address of the bot owner
    botOwner: Address;
    // proofUrl is the url of the proof, better be stored at arweave
    proofUrl: String;
    // attestValue is the value that will be paid to the verifier,
    // the value in the message should be greater than attestValue.
    attestValue: Int;
}

// AttestTaskResult is the result of the attest task, generated by the verifier oracle,
// and will be sent to the wallet contract.
message(0xe830eca8) AttestTaskResult {
    queryId: Int as uint64;
    // taskId is the id of the attest task
    taskId: Int as uint64;
    // status is the result of the attest task, can be "verified" or "rejected"
    status: String;
    // verifiedUrl is the url of the verified proof, better be stored at arweave
    verifiedUrl: String;
    // botOwner is the address of the bot owner,
    botOwner: Address;
    // oracleOwner is the address of the owner of the oracle contract
    oracleOwner: Address;
}

// PayAttestIncentive is the message that used to pay the incentive to the bot owner.
message(0x43a5c8c5) PayAttestIncentive {
    queryId: Int as uint64;
    taskId: Int as uint64;
    incentive: Int;
    // releaseTime when to release the incentive
    releaseTime: Int as uint32;
    botOwner: Address;
}

// =====================================
// Events
// =====================================
message(0x6f368da8) WalletManifestChangedEvent {
    oldManifestUrl: String;
    newManifestUrl: String;
}

message(0xce1a8739) WalletCreatedEvent {
    wallet: Address;
    owner: Address;
}

// =====================================
// Structs
// =====================================
struct PendingAttestTask {
    incentive: Int as coins;
    // if finishedNotifyUser is not null, notify user when the attest task is finished.
    finishedNotifyUser: Address?;
    // finishedNotifyTonAmound should not be null when finishedNotifyUser is not null.
    finishedNotifyTonAmound: Int? as coins;
    // finishedNotifyMessage should not be null when finishedNotifyUser is not null.
    finishedNotifyMessage: String?;
}
