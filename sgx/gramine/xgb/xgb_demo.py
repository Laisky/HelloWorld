#!/usr/bin/env python
# xgboost.__version__ == '1.7.1'

import xgboost as xgb

data = pd.DataFrame([[1,0.254879,-1.046633,0.209656,0.074214,-0.441366,-0.377645,-0.485934,0.347072,-0.28757,-0.733474,0.449512],
	[1,-1.142928,-0.781198,-1.166747,-0.923578,0.62823,-1.021418,-1.111867,-0.959523,-0.096672,-0.121683,-1.245485],
	[1,-1.451067,-1.406518,-1.456564,-1.092337,-0.708765,-1.168557,-1.305831,-1.745063,-0.499499,-0.302893,-1.549664],
	[1,-0.879933,0.420589,-0.877527,-0.780484,-1.037534,-0.48388,-0.555498,-0.768581,0.43396,-0.200928,-0.851273],
	[0,0.426758,0.723479,0.316885,0.287273,1.000835,0.962702,1.077099,1.053586,2.996525,0.961696,0.091654],
	[0,0.963102,1.467675,0.829202,0.772457,-0.038076,-0.468613,-0.307946,-0.015321,-0.641864,-0.247477,1.080023],
	[0,0.741523,-0.095626,0.704101,0.600181,0.404667,-0.087565,0.314773,1.082516,0.383809,-0.156041,0.901094],
	[0,0.869914,-0.092369,0.763673,0.740814,0.413434,0.607736,0.413122,0.561767,-0.708193,-0.36385,1.00902],
	[1,-0.664567,0.011851,-0.68243,-0.637741,0.198638,-0.499147,-0.674477,-0.353352,0.323951,-0.76894,-0.646783],
	[1,-0.548601,-1.650784,-0.591583,-0.533673,-1.587236,-0.887829,-0.736844,-0.928004,-0.957331,-0.819922,-0.351408],
	[0,0.379129,0.979143,0.310928,0.262662,0.28631,-0.308942,-0.004742,0.584607,-0.365223,-0.289039,0.276263],
	[0,0.522016,-1.406518,0.528365,0.389232,0.90878,0.661808,1.491126,1.036837,0.509996,0.945071,0.378508],
	[1,0.153409,-1.868995,0.156042,-0.046203,0.952616,0.277579,0.615098,0.465839,-0.556121,-0.118358,0.455192],
	[1,-0.606584,1.166414,-0.675579,-0.585004,-0.879725,-1.053734,-0.756514,-0.613574,-0.334485,-0.840426,-0.553058],
	[0,0.029159,0.64857,0.17987,-0.063607,1.097274,0.835474,1.143785,1.377912,1.106957,1.493688,-0.206561],
	[0,0.687682,-0.128194,0.781544,0.54217,1.662757,0.885093,1.101567,2.127061,0.336894,0.369301,0.830091],
	[1,-1.012466,-1.632871,-1.013648,-0.854492,0.084665,-0.56785,-0.892524,-0.72549,0.058635,-0.372717,-1.098366],
	[1,-0.801242,-1.088973,-0.828082,-0.71755,0.154802,-1.085159,-0.962664,-0.382891,-1.101313,-1.30869,-0.635423],
	[1,-0.331164,-1.424431,-0.389933,-0.385832,-0.673696,-0.935539,-1.126787,-0.861616,-0.125792,-0.886975,-0.101476],
	[0,1.267513,-1.102,1.275989,1.282251,0.676449,1.96653,0.510512,1.455568,1.375509,1.488146,1.114105]
	])
column = ['y','x0','x1','x2','x3','x4','x5','x6','x7','x8','x9','x10']
data.columns = column

train_label, train_data = data["y"], data.drop(columns=["y"])
train_dataset = xgb.DMatrix(data=train_data, label=train_label)
val_dataset = xgb.DMatrix(data=train_data, label=train_label)

param = {'max_depth': 5, 'eta': 0.3, 'objective': 'binary:logistic', 'eval_metric': ["auc"]}
watchlist = [(train_dataset, 'train'), (val_dataset, 'eval')]
bst: xgb.Booster = xgb.train(param, train_dataset, 20, watchlist, early_stopping_rounds=10)
preds = bst[:bst.best_iteration + 1].predict(val_dataset)
labels = val_dataset.get_label()
if preds.shape==labels.shape:
	print("Succeed!")

