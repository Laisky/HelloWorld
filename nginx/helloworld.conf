server {
    listen 17280;
    server_name localhost;

    default_type text/html;

    # 声明变量
    # 必须在启动时声明，不能在请求时动态创建
    # 全局可见，但是各自复制为独立的副本
    set $name "world";

    # 请求 http://localhost:17280/args?name=hello%20world
    # http_core_module 提供的 $arg_xxx 变量群
    #
    # 类似的还有 $cookie_xxx, $http_xxx, $sent_http_xxx
    location = /args {
        # 参数匹配，无视大小写
        # 得到原始字符串，不做转义
        echo "name: $arg_name";

        # nginx_set_misc 模块提供的
        # set_unescape_uri 支持自动转义
        set_unescape_uri $unquote_name $arg_name;
        echo "unquote name: $unquote_name";
    }

    # Nginx 内有主请求（main request）和子请求（sub request）
    # 子请求就是 Nginx 内部向其他 location 发起的请求
    location = /subrequest {
        echo_location /;
        echo_location "/args?name=yo";
    }

    location = /phrase {
        set $a 1;
        rewrite_by_lua "ngx.var.a = ngx.var.a + 1";

        echo "$a";  # 2
    }

    # echo 属于 content phrase，而一次只能运行一个 content phrase
    # 所以多个 echo 只会有一个能够被运行，具体运行哪一个不确定
    # 想要多次 echo 需要在 output filter时，动态的添加
    # ngx_echo 的 echo_before_body & echo_after_body 就是这样实现
    #
    # ------------- Display -------------
    # = before...
    # hello, world
    # = after...
    location = /content {
        echo_before_body = "before...";
        proxy_pass http://localhost:17280/;
        echo_after_body = "after...";
    }


    # ngx_index & ngx_auto_index 只作用于以 / 结尾的地址
    # 找到相应的文件后，会发现一次内部跳转（可能会被 url 匹配的 location 捕获）
    # 如果找不到相应的文件，就会出现错误（如果没有其他后续 content 模块能够处理）
    #
    # ------------- Display -------------
    # hello, index.html
    location /index/ {
        root /var/www/;
        index index.html;  # 发起一次 index.html 的内部跳转
    }

    # 拦截 ngx_index 的内部跳转，不显示文件内容
    location /index.html {
        echo "hello, index.html";
    }

    location / {
        echo 'hello, $name';
    }
}
